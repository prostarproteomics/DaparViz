#' @title  Tracking of entities within plots
#'
#' @description
#'
#' This shiny module offers a UI to select a subset of a dataset
#' and superimpose quantitative values of this selection on the complete plot
#' Three modes of selection are implemented:
#'
#' - 'Protein list': xxx,
#' - 'Random': xxx,
#' - 'Specific column': xxx
#' 
#' This module can run in two different modes:
#' * autonom mode: xxx
#' * slave mode: in this case, the module gets its instructions from an external
#' function which sets the values of some params
#' 
#' @param id A `character(1)` which is the id of the shiny module.
#' @param vizData A instance of the class `VizData`
#' @param params xxx
#' @param reset = FALSE
#' @param slave = FALSE
#' @name mod_seTracker
#' 
#' @return NA
#'
#' @example examples/ex_mod_seTracker.R
#' 
NULL



#' @export
#'
#' @importFrom shiny NS tagList
#' @importFrom shinyjs useShinyjs hidden
#'
#' @rdname mod_seTracker
#'
mod_seTracker_ui <- function(id) {
    ns <- NS(id)

    tagList(
        useShinyjs(),
        hidden(actionButton(ns("rst_btn"), "Reset")),
        
        uiOutput(ns("typeSelect_ui")),
        
        uiOutput(ns("listSelect_ui")),
        uiOutput(ns("randSelect_ui")),
        uiOutput(ns("colSelect_ui"))
    )
}

#'
#' @rdname mod_seTracker
#'
#' @export
#'
#' @importFrom shinyjs toggle hidden show hide
#' @importFrom stats setNames
#' 
mod_seTracker_server <- function(id, 
                                 vizData = reactive({NULL}),
                                 params,
                                 reset = FALSE,
                                 slave = FALSE) {
    
    moduleServer(id, function(input, output, session) {
        ns <- session$ns

        rv.track <- reactiveValues(
            typeSelect = "None",
            
            listSelect = NULL,
            randSelect = "",
            colSelect = NULL,
            
            indices = NULL,
            
            # If it is required, prepares the module to run in slave mode
            sync = slave()
        )

        observeEvent(vizData(), {stopifnot(inherits(obj(), "VizData"))})
        
        output$typeSelect_ui <- renderUI({
            tmp <- c("None", "ProteinList", "Random", "Column")
            nm <- c("None", "Protein list", "Random", "Specific Column")

            selectInput(ns("typeSelect"), "Type of selection",
                choices = setNames(tmp, nm),
                width = "130px"
            )
        })


        output$listSelect_ui <- renderUI({
          
          widget <- selectInput(ns("listSelect"), "Select",
                choices = c("None", vizData()@metadata[, vizData()@colID]),
                multiple = TRUE,
                selected = rv.track$listSelect,
                width = "200px",
                # size = 10,
                selectize = TRUE,
                options = list(maxOptions = 10000)
            )

            # if (rv.track$typeSelect == "ProteinList") {
            #     widget
            # } else {
            #     hidden(widget)
            # }
        })
        
        
        GetLogicalCols <- reactive({
          logical.cols <- lapply(colnames(vizData()@metadata),
            function(x) { is.logical((vizData()@metadata)[, x])
              })
          logical.cols <- which(unlist(logical.cols))
          logical.cols
        })

        output$colSelect_ui <- renderUI({
            widget <- selectInput(ns("colSelect"),
                "Column of rowData",
                choices = c("", GetLogicalCols()),
                selected = rv.track$colSelect
            )
            # if (rv.track$typeSelect == "Column") {
            #     widget
            # } else {
            #     hidden(widget)
            # }
        })

        output$randSelect_ui <- renderUI({
            widget <- textInput(ns("randSelect"), "Random",
                value = rv.track$randSelect,
                width = "120px"
            )
            # if (rv.track$typeSelect == "Random") {
            #     widget
            # } else {
            #     hidden(widget)
            # }
        })

        observeEvent(req(input$typeSelect), {
            rv.track$typeSelect <- input$typeSelect
            toggle('randSelect', rv.track$typeSelect == "Random")
            toggle('colSelect', rv.track$typeSelect == "Column")
            toggle('listSelect', rv.track$typeSelect == "ProteinList")
            
        })

        
        observeEvent(req(reset()), {
          if (reset() > 0) {
            updateSelectInput(session, "typeSelect", selected = "None")
            updateSelectInput(session, "listSelect", NULL)
            updateSelectInput(session, "randSelect", selected = "")
            updateSelectInput(session, "colSelect", selected = NULL)
            rv.track$res <- list(
              typeSelect = "None",
              listSelect = NULL,
              randSelect = "",
              colSelect = NULL,
              list.indices = NULL,
              rand.indices = NULL,
              col.indices = NULL
            )
          }
        })
        
        

        observeEvent(input$rst_btn, {
            rv.track$typeSelect <- "None"
            rv.track$listSelect <- NULL
            rv.track$randSelect <- ""
            rv.track$colSelect <- NULL
            rv.track$indices <- NULL
        })

        # Catch event on the list selection
        observeEvent(input$listSelect, {
            rv.track$listSelect <- input$listSelect
            rv.track$randSelect <- ""
            rv.track$colSelect <- ""

            if (is.null(rv.track$listSelect)) {
                rv.track$indices <- NULL
            } else {
                #.col <- idcol(se())
                rv.track$indices <- match(rv.track$listSelect, vizData()@metadata[, vizData()@colID])
            }
        })





        observeEvent(input$randSelect, {
            rv.track$randSelect <- input$randSelect
            rv.track$listSelect <- NULL
            rv.track$colSelect <- NULL
            cond <- is.null(rv.track$randSelect)
            cond <- cond || rv.track$randSelect == ""
            cond <- cond || (as.numeric(rv.track$randSelect) < 0)
            cond <- cond || (as.numeric(rv.track$randSelect) > nrow(vizData()@metadata))
            if (!cond) {
                rv.track$indices <- sample(seq_len(nrow(vizData()@metadata)),
                    as.numeric(rv.track$randSelect),
                    replace = FALSE
                )
            }
        })

        observeEvent(input$colSelect, {
            rv.track$colSelect <- input$colSelect
            rv.track$listSelect <- NULL
            rv.track$randSelect <- ""

            if (rv.track$colSelect != "") {
                 rv.track$indices <- which(metadata[, rv.track$colSelect] == 1)
            }
        })

        return(reactive({ rv.track$indices}))
    })
}
