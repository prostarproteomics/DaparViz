% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mod_ds_heatmap.R, R/plot_heatmap.R
\name{heatmaps}
\alias{heatmaps}
\alias{mod_ds_heatmap_ui}
\alias{mod_ds_heatmap_server}
\alias{heatmapD}
\alias{mv.heatmap}
\title{Displays a correlation matrix of the quantitative data of a
numeric matrix.}
\usage{
mod_ds_heatmap_ui(id)

mod_ds_heatmap_server(
  id,
  vizData = reactive({
     NULL
 }),
  width = 900
)

heatmapD(data, conds, distfun = "euclidean", hclustfun = "complete")

mv.heatmap(
  x,
  col = grDevices::heat.colors(100),
  srtCol = NULL,
  labCol = NULL,
  labRow = NULL,
  key = TRUE,
  key.title = NULL,
  main = NULL,
  ylab = NULL
)
}
\arguments{
\item{id}{A \code{character(1)} which is the id of the shiny module.}

\item{width}{xxx}

\item{data}{A \code{matrix} or \code{array} quantitative values}

\item{conds}{A \code{character()} of the name of conditions
(one condition per sample). The number of conditions must be equal to
the number of samples (number of columns) of the parameter 'data'.}

\item{distfun}{A \code{character(1)} defining the distance used by the clustering
algorithm to compute. Default value is 'euclidean'.
See \code{help(heatmap.2)}}

\item{hclustfun}{the clustering algorithm used to build the dendrogram.
Default value is 'complete'. See \code{help(heatmap.2)}}

\item{x}{A \code{matrix} or \code{array} containing the quantitative data.}

\item{col}{Colors used for the image. Defaults to heat colors (heat.colors).}

\item{srtCol}{Angle of column conds, in degrees from horizontal}

\item{labCol}{Character vectors with column conds to use.}

\item{labRow}{Character vectors with row conds to use.}

\item{key}{Logical indicating whether a color-key should be shown.}

\item{key.title}{Main title of the color key. If set to NA no title will
be plotted.}

\item{main}{Main title; default to none.}

\item{ylab}{y-axis title; default to none.}
}
\value{
NA

NA
}
\description{
xxxx
}
\examples{

library(SummarizedExperiment)
data(ft_na, package='DaparViz')

vizData <- Build_DaparVizData(ft,1)

heatmapD(vizData@qdata, vizData@conds)
mv.heatmap(vizData@qdata)

#------------------------------------------
# Shiny module
#------------------------------------------

data(ft, package='DaparViz')
ui <- mod_ds_heatmap_ui("plot")

server <- function(input, output, session) {
  vizData <- Build_DaparVizData(ft,1)
  
  mod_ds_heatmap_server("plot",
                        reactive({vizData})
  )
  }
shinyApp(ui = ui, server = server)
}
