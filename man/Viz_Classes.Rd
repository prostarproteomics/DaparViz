% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/VizData_Class.R, R/VizList_Class.R
\docType{class}
\name{Viz_Classes}
\alias{Viz_Classes}
\alias{VizData-class}
\alias{VizData}
\alias{show,VizData-method}
\alias{initialize,VizData-method}
\alias{Convert2VizList,QFeatures-method}
\alias{VizList}
\alias{initialize,VizList-method}
\title{VizData class definition}
\usage{
\S4method{show}{VizData}(object)

\S4method{initialize}{VizData}(.Object, qdata, metacell, metadata, colID, conds, type, cc, matAdj)

\S4method{Convert2VizList}{QFeatures}(object)

VizList(ll.vizData = NULL)

\S4method{initialize}{VizList}(.Object, ll.vizData)
}
\arguments{
\item{object}{xxx}

\item{.Object}{xxx}

\item{qdata}{xxx}

\item{metacell}{xxx}

\item{conds}{xxx}

\item{type}{xxx}

\item{ll.vizData}{xxx}
}
\value{
NA
}
\description{
This class is used to store the configuration of any process
used with MagellanNTK It contains a validity function to ensure
that the format is correct.

Validity:
\itemize{
\item The first step must be called 'Description', it is a mandatory step. Thus,
the first item of the mandatory vector is TRUE.
To be continued...
}
\subsection{Initialization}{
\subsection{Generic process}{

A generic process
\itemize{
\item Generic pipeline : xxxx
\item Description pipeline: This case is for a process -called 'Description' which is
the first process module of a pipeline
}
}

}

xxx

xxx

This class is used to store the configuration of any process
used with MagellanNTK It contains a validity function to ensure
that the format is correct.

Validity:
\itemize{
\item The first step must be called 'Description', it is a mandatory step. Thus,
the first item of the mandatory vector is TRUE.
To be continued...
}
\subsection{Initialization}{
\subsection{Generic process}{

A generic process
\itemize{
\item Generic pipeline : xxxx
\item Description pipeline: This case is for a process -called 'Description' which is
the first process module of a pipeline
}
}

}

xxx
}
\section{Slots}{

\describe{
\item{\code{qdata}}{xxx}

\item{\code{metacell}}{xxx}

\item{\code{conds}}{xxx}

\item{\code{type}}{xxx}

\item{\code{ll.vizData}}{xxx}
}}

\examples{
library(MSnbase)
library(DaparToolshed)
library(SummarizedExperiment)
library(DaparViz)

# Convert a QFeatures object to an instance of VizList class
data(ft, package='DaparToolshed')
test <- convert2viz(ft)

# Convert a list of MSnSet objects to an instance of VizList class
data(Exp1_R25_prot, package='DAPARdata')
data(Exp1_R25_pept, package='DAPARdata')
data(Exp1_R2_pept, package='DAPARdata')
ll.tmp <- setNames(c(Exp1_R25_prot, Exp1_R25_pept, Exp1_R2_pept),
                   nm = c('Exp1_R25_prot', 'Exp1_R25_pept', 'Exp1_R2_pept'))

test <- convert2viz(ll.tmp)



data(Exp1_R25_pept, package='DAPARdata')
msnset <- Exp1_R25_pept
ll.Exp1_R25_pept <- list(
  qdata = exprs(msnset),
  metacell = fData(msnset)[ , msnset@experimentData@other$names_metacell],
  mdata = fData(msnset),
  colID = msnset@experimentData@other$keyId,
  conds = pData(msnset)[, 'Condition'],
  type = msnset@experimentData@other$typeOfData
  )

data(Exp1_R25_prot, package='DAPARdata')
msnset <- Exp1_R25_prot
ll.Exp1_R25_prot <- list(
   qdata = exprs(msnset),
  metacell = fData(msnset)[ , msnset@experimentData@other$names_metacell],
  mdata = fData(msnset),
  colID = msnset@experimentData@other$keyId,
  conds = pData(msnset)[, 'Condition'],
  type = msnset@experimentData@other$typeOfData
)

data(Exp1_R2_pept, package='DAPARdata')
msnset <- Exp1_R2_pept
ll.Exp1_R2_pept <- list(
  qdata = exprs(msnset),
  metacell = fData(msnset)[ , msnset@experimentData@other$names_metacell],
  mdata = fData(msnset),
  colID = msnset@experimentData@other$keyId,
  conds = pData(msnset)[, 'Condition'],
  type = msnset@experimentData@other$typeOfData
)


ll.tmp <- list(
  Exp1_R25_pept = ll.Exp1_R25_pept,
  Exp1_R25_prot = ll.Exp1_R25_prot,
  Exp1_R2_pept = ll.Exp1_R2_pept
)

convert2viz(ll.tmp)
library(MSnbase)
library(DaparToolshed)
library(SummarizedExperiment)
library(DaparViz)

# Convert a QFeatures object to an instance of VizList class
data(ft, package='DaparToolshed')
test <- convert2viz(ft)

# Convert a list of MSnSet objects to an instance of VizList class
data(Exp1_R25_prot, package='DAPARdata')
data(Exp1_R25_pept, package='DAPARdata')
data(Exp1_R2_pept, package='DAPARdata')
ll.tmp <- setNames(c(Exp1_R25_prot, Exp1_R25_pept, Exp1_R2_pept),
                   nm = c('Exp1_R25_prot', 'Exp1_R25_pept', 'Exp1_R2_pept'))

test <- convert2viz(ll.tmp)



data(Exp1_R25_pept, package='DAPARdata')
msnset <- Exp1_R25_pept
ll.Exp1_R25_pept <- list(
  qdata = exprs(msnset),
  metacell = fData(msnset)[ , msnset@experimentData@other$names_metacell],
  mdata = fData(msnset),
  colID = msnset@experimentData@other$keyId,
  conds = pData(msnset)[, 'Condition'],
  type = msnset@experimentData@other$typeOfData
  )

data(Exp1_R25_prot, package='DAPARdata')
msnset <- Exp1_R25_prot
ll.Exp1_R25_prot <- list(
   qdata = exprs(msnset),
  metacell = fData(msnset)[ , msnset@experimentData@other$names_metacell],
  mdata = fData(msnset),
  colID = msnset@experimentData@other$keyId,
  conds = pData(msnset)[, 'Condition'],
  type = msnset@experimentData@other$typeOfData
)

data(Exp1_R2_pept, package='DAPARdata')
msnset <- Exp1_R2_pept
ll.Exp1_R2_pept <- list(
  qdata = exprs(msnset),
  metacell = fData(msnset)[ , msnset@experimentData@other$names_metacell],
  mdata = fData(msnset),
  colID = msnset@experimentData@other$keyId,
  conds = pData(msnset)[, 'Condition'],
  type = msnset@experimentData@other$typeOfData
)


ll.tmp <- list(
  Exp1_R25_pept = ll.Exp1_R25_pept,
  Exp1_R25_prot = ll.Exp1_R25_prot,
  Exp1_R2_pept = ll.Exp1_R2_pept
)

convert2viz(ll.tmp)
}
