% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DaparVizData.R
\name{DaparVizData}
\alias{DaparVizData}
\alias{initialize,DaparVizData-method}
\alias{DaparVizData,QFeatures-method}
\title{DaparVizData class definition}
\usage{
DaparVizData(...)

\S4method{initialize}{DaparVizData}(.Object, name, qdata, mdata, conds, type)

\S4method{DaparVizData}{QFeatures}(object, i)
}
\arguments{
\item{.Object}{xxx}

\item{name}{xxx}

\item{qdata}{xxx}

\item{mdata}{xxx}

\item{conds}{xxx}

\item{type}{xxx}

\item{fullname}{xxx}

\item{mode}{xxx}

\item{steps}{xxx}

\item{mandatory}{xxx

#' @exportMethod qMetacell
#' @rdname QFeatures-accessors
#' @return NA
setMethod("DaparVizData", "c('character', 'matrix', 'data.frame', 'vector', 'character')",
function(name, qdata, mdata, conds, type) {
new(Class ="DaparVizData",
name = name,
qdata = qdata,
mdata = mdata,
conds = conds,
type = type
)
}
)}
}
\value{
NA
}
\description{
This class is used to store the configuration of any process
used with MagellanNTK It contains a validity function to ensure
that the format is correct.

Validity:
\itemize{
\item The first step must be called 'Description', it is a mandatory step. Thus,
the first item of the mandatory vector is TRUE.
To be continued...
}
\subsection{Initialization}{
\subsection{Generic process}{

A generic process
\itemize{
\item Generic pipeline : xxxx
\item Description pipeline: This case is for a process -called 'Description' which is
the first process module of a pipeline
}
}

}

Wrapper function to the constructor of the class
}
\section{Slots}{

\describe{
\item{\code{name}}{xxx}

\item{\code{qdata}}{xxx}

\item{\code{mdata}}{xxx}

\item{\code{conds}}{xxx}

\item{\code{type}}{xxx}
}}

\examples{
library(MSnbase)
library(DaparToolshed)


data(Exp1_R25_prot, package='DaparToolshedData')
qf <- Exp1_R25_prot
DaparVizData(qf, 1)
DaparVizData(qf)


data(Exp1_R25_pept, package='DAPARdata')
msnset <- Exp1_R25_pept
DaparVizData(msnset)


name <- 'test_list'
qdata <- exprs(msnset)[1:5,]
mdata <- fData(msnset)[1:5,]
conds <- pData(msnset)[, 'Condition']
type <- msnset@experimentData@other$typeOfData

DaparVizData(name, qdata, mdata, conds, type)
}
